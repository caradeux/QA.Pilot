#!/usr/bin/env python3
"""
Script para probar la conexi√≥n a PostgreSQL y verificar la configuraci√≥n de la base de datos.
Ejecutar despu√©s de instalar el script SQL.
"""

import os
import sys
from dotenv import load_dotenv
from db_models import DatabaseManager
import logging

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def load_config():
    """Cargar configuraci√≥n desde archivo de entorno"""
    # Intentar cargar desde .env primero, luego config_db.env
    if os.path.exists('.env'):
        load_dotenv('.env')
        logger.info("Configuraci√≥n cargada desde .env")
    elif os.path.exists('config_db.env'):
        load_dotenv('config_db.env')
        logger.info("Configuraci√≥n cargada desde config_db.env")
    else:
        logger.warning("No se encontr√≥ archivo de configuraci√≥n. Usando valores por defecto.")
    
    config = {
        'host': os.getenv('DB_HOST', 'localhost'),
        'port': int(os.getenv('DB_PORT', 5432)),
        'database': os.getenv('DB_NAME', 'playwright_testing_db'),
        'username': os.getenv('DB_USER', 'postgres'),
        'password': os.getenv('DB_PASSWORD', ''),
    }
    
    return config

def test_connection():
    """Probar conexi√≥n a la base de datos"""
    try:
        config = load_config()
        
        if not config['password']:
            logger.error("‚ö†Ô∏è  Debes configurar DB_PASSWORD en tu archivo de configuraci√≥n")
            return False
        
        logger.info(f"üîç Intentando conectar a PostgreSQL:")
        logger.info(f"   Host: {config['host']}")
        logger.info(f"   Puerto: {config['port']}")
        logger.info(f"   Base de datos: {config['database']}")
        logger.info(f"   Usuario: {config['username']}")
        
        # Inicializar DatabaseManager
        db_manager = DatabaseManager(
            host=config['host'],
            port=config['port'],
            database=config['database'],
            username=config['username'],
            password=config['password']
        )
        
        # Probar conexi√≥n
        session = db_manager.get_session()
        try:
            # Verificar que las tablas existen
            result = session.execute("SELECT table_name FROM information_schema.tables WHERE table_schema = 'testing'")
            tables = [row[0] for row in result.fetchall()]
            
            logger.info("‚úÖ Conexi√≥n exitosa a PostgreSQL")
            logger.info(f"üìä Tablas encontradas en schema 'testing': {tables}")
            
            if len(tables) >= 6:  # Esperamos al menos 6 tablas principales
                logger.info("‚úÖ Todas las tablas principales est√°n creadas")
                return True
            else:
                logger.warning(f"‚ö†Ô∏è  Solo se encontraron {len(tables)} tablas. Verifica que el script SQL se ejecut√≥ correctamente.")
                return False
        finally:
            session.close()
                
    except Exception as e:
        logger.error(f"‚ùå Error de conexi√≥n: {str(e)}")
        logger.error("üí° Verifica que:")
        logger.error("   1. PostgreSQL est√© ejecut√°ndose")
        logger.error("   2. La base de datos exista")
        logger.error("   3. Las credenciales sean correctas")
        logger.error("   4. El script SQL se haya ejecutado")
        return False

def test_basic_operations():
    """Probar operaciones b√°sicas de la base de datos"""
    try:
        config = load_config()
        db_manager = DatabaseManager(
            host=config['host'],
            port=config['port'],
            database=config['database'],
            username=config['username'],
            password=config['password']
        )
        
        from db_models import Project, TestSuite, TestCase
        
        session = db_manager.get_session()
        try:
            # Crear un proyecto de prueba
            test_project = Project(
                name="Test Project",
                description="Proyecto de prueba para verificar la base de datos",
                status="active"
            )
            session.add(test_project)
            session.commit()
            
            logger.info("‚úÖ Proyecto de prueba creado exitosamente")
            
            # Limpiar el proyecto de prueba
            session.delete(test_project)
            session.commit()
            
            logger.info("‚úÖ Operaciones b√°sicas funcionando correctamente")
            return True
        finally:
            session.close()
            
    except Exception as e:
        logger.error(f"‚ùå Error en operaciones b√°sicas: {str(e)}")
        return False

def main():
    """Funci√≥n principal"""
    logger.info("üöÄ Iniciando pruebas de conexi√≥n a PostgreSQL...")
    logger.info("=" * 60)
    
    # Probar conexi√≥n
    if not test_connection():
        logger.error("‚ùå Fall√≥ la prueba de conexi√≥n")
        return 1
    
    # Probar operaciones b√°sicas
    if not test_basic_operations():
        logger.error("‚ùå Fallaron las operaciones b√°sicas")
        return 1
    
    logger.info("=" * 60)
    logger.info("üéâ ¬°Todas las pruebas pasaron exitosamente!")
    logger.info("üí° La base de datos est√° lista para usar")
    
    return 0

if __name__ == "__main__":
    sys.exit(main()) 