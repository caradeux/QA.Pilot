# -*- coding: utf-8 -*-
"""
Test Demo Mejorado con Utilidad de Capturas - VERSI√ìN CORREGIDA
==============================================================
Versi√≥n que combina la l√≥gica exitosa del test_demo.py original
con la nueva utilidad de capturas simplificada.

Esta versi√≥n mantiene la navegaci√≥n manual que funcionaba correctamente
pero usa las capturas simplificadas.
"""

import sys
import os
import asyncio
from dotenv import load_dotenv
from langchain_anthropic import ChatAnthropic
from browser_use import Agent, Browser, BrowserConfig, BrowserContextConfig
from pydantic import SecretStr

# ‚≠ê IMPORTAR LA NUEVA UTILIDAD DE CAPTURAS
from utils_screenshot import ScreenshotManager

# Cargar variables de entorno
load_dotenv()

async def main():
    """
    Test demo corregido que mantiene la navegaci√≥n manual exitosa
    pero usa las capturas simplificadas.
    """
    browser = None
    agent = None
    
    try:
        print("üöÄ Iniciando test demo corregido...")
        
        # ===== CONFIGURACI√ìN DEL NAVEGADOR (IGUAL QUE EL ORIGINAL) =====
        print("üåê Inicializando browser...")
        browser = Browser(
            config=BrowserConfig(
                headless=False,  # ‚ö†Ô∏è EXPL√çCITAMENTE False
                new_context_config=BrowserContextConfig(
                    browser_window_size={"width": 1920, "height": 1080},
                    minimum_wait_page_load_time=1.0,
                    wait_for_network_idle_page_load_time=2.0,
                    maximum_wait_page_load_time=15.0,
                    wait_between_actions=0.5
                )
            )
        )
        print("‚úÖ Browser configurado correctamente con viewport 1920x1080")

        # ===== CONFIGURACI√ìN DEL LLM (IGUAL QUE EL ORIGINAL) =====
        print("ü§ñ Configurando LLM...")
        anthropic_key = os.getenv('ANTHROPIC_API_KEY')
        
        if not anthropic_key:
            try:
                from dotenv import load_dotenv
                load_dotenv()
                anthropic_key = os.getenv('ANTHROPIC_API_KEY')
            except ImportError:
                pass
                
        if not anthropic_key:
            env_path = os.path.join(os.getcwd(), '.env')
            if os.path.exists(env_path):
                try:
                    with open(env_path, 'r') as f:
                        for line in f:
                            if line.startswith('ANTHROPIC_API_KEY='):
                                anthropic_key = line.split('=', 1)[1].strip().strip('"').strip("'")
                                break
                except Exception as e:
                    print(f"Error leyendo .env: {e}")
        
        if not anthropic_key:
            raise ValueError("‚ùå ANTHROPIC_API_KEY no encontrada")
        
        # Verificar si la clave es SecretStr (como en el original)
        if isinstance(anthropic_key, SecretStr):
            anthropic_key = anthropic_key.get_secret_value()
            
        llm = ChatAnthropic(
            model="claude-3-5-sonnet-20241022",  # Modelo actualizado
            api_key=anthropic_key,
            temperature=0.1,
            max_tokens=4000
        )
        print("‚úÖ LLM configurado correctamente")

        # ===== CREAR AGENTE (IGUAL QUE EL ORIGINAL PERO SIN TASK INICIAL) =====
        print("ü§ñ Creando agente...")
        
        # ‚ö†Ô∏è CREAR AGENTE SIN TASK PARA NAVEGACI√ìN MANUAL
        agent = Agent(
            task="",  # Task vac√≠o para control manual
            llm=llm,
            browser=browser,
            use_vision=True  # Como en el original
        )
        print("‚úÖ Agente creado correctamente")

        # ‚≠ê ===== CONFIGURAR GESTOR DE CAPTURAS =====
        print("üì∑ Configurando gestor de capturas...")
        screenshots = ScreenshotManager(task_id="test_demo_corregido")
        print(f"‚úÖ Capturas se guardar√°n en: {screenshots.obtener_directorio()}")

        # ===== NAVEGACI√ìN MANUAL (COMO EN EL ORIGINAL) =====
        print("üåê Navegando a MercadoLibre...")
        await agent.browser_context.navigate_to("https://www.mercadolibre.cl")
        print("‚úÖ Navegaci√≥n inicial completada")
        
        # Pausa para permitir carga completa
        await asyncio.sleep(2)
        
        # ‚≠ê CAPTURA INICIAL
        print("üì∏ Tomando captura inicial...")
        await screenshots.capturar_inicial(
            agent.browser_context, 
            "P√°gina inicial MercadoLibre cargada"
        )

        # ===== PASO 1: BUSCAR 'SMARTPHONE' =====
        print("üîç Ejecutando paso 1: Buscar 'smartphone'...")
        
        try:
            # Localizar el elemento de b√∫squeda
            search_input = await agent.browser_context.get_locate_element_by_css_selector('input[name="as_word"]')
            if search_input:
                await search_input.fill('smartphone')
                print("‚úÖ Texto 'smartphone' ingresado en b√∫squeda")
                
                # Hacer clic en el bot√≥n de b√∫squeda
                search_button = await agent.browser_context.get_locate_element_by_css_selector('.nav-search-btn')
                if search_button:
                    await search_button.click()
                    print("‚úÖ Bot√≥n de b√∫squeda presionado")
                    
                    # Esperar resultados
                    await asyncio.sleep(3)
                    
                    # ‚≠ê CAPTURA DESPU√âS DE B√öSQUEDA
                    await screenshots.capturar_paso(
                        agent.browser_context,
                        1,
                        "Resultados b√∫squeda smartphone"
                    )
                else:
                    print("‚ùå No se encontr√≥ el bot√≥n de b√∫squeda")
            else:
                print("‚ùå No se encontr√≥ el campo de b√∫squeda")
                # Si no funciona la b√∫squeda manual, usar el agente
                print("ü§ñ Usando agente para b√∫squeda...")
                agent.task = "Busca 'smartphone' en la p√°gina"
                await agent.run(max_steps=3)
                
                await screenshots.capturar_paso(
                    agent.browser_context,
                    1,
                    "B√∫squeda realizada por agente"
                )
                
        except Exception as e:
            print(f"‚ö†Ô∏è Error en b√∫squeda manual: {e}")
            # Fallback al agente
            print("ü§ñ Usando agente como fallback...")
            agent.task = "Busca 'smartphone' en MercadoLibre"
            await agent.run(max_steps=3)
            
            await screenshots.capturar_paso(
                agent.browser_context,
                1,
                "B√∫squeda fallback por agente"
            )

        # ===== PASO 2: SELECCIONAR PRIMER RESULTADO =====
        print("üéØ Ejecutando paso 2: Seleccionar primer resultado...")
        
        try:
            # Intentar hacer clic en el primer resultado
            result_link = await agent.browser_context.get_locate_element_by_css_selector('.ui-search-result__content a')
            if result_link:
                await result_link.click()
                print("‚úÖ Primer resultado seleccionado")
                
                # Esperar carga de p√°gina de producto
                await asyncio.sleep(3)
                
                # ‚≠ê CAPTURA DE PRODUCTO
                await screenshots.capturar_paso(
                    agent.browser_context,
                    2,
                    "P√°gina de producto cargada"
                )
            else:
                print("‚ùå No se encontr√≥ el primer resultado")
                # Usar agente para seleccionar
                print("ü§ñ Usando agente para seleccionar...")
                agent.task = "Haz clic en el primer producto de los resultados"
                await agent.run(max_steps=3)
                
                await screenshots.capturar_paso(
                    agent.browser_context,
                    2,
                    "Producto seleccionado por agente"
                )
                
        except Exception as e:
            print(f"‚ö†Ô∏è Error seleccionando producto: {e}")
            # Fallback al agente
            print("ü§ñ Usando agente como fallback...")
            agent.task = "Selecciona el primer producto de los resultados de b√∫squeda"
            await agent.run(max_steps=3)
            
            await screenshots.capturar_paso(
                agent.browser_context,
                2,
                "Selecci√≥n fallback por agente"
            )

        # ===== PASO 3: VER DETALLES =====
        print("üëÄ Ejecutando paso 3: Ver detalles del producto...")
        
        # Simplemente esperar a que se cargue y hacer scroll si es necesario
        await asyncio.sleep(2)
        
        # ‚≠ê CAPTURA FINAL
        print("üì∏ Tomando captura final...")
        await screenshots.capturar_final(
            agent.browser_context,
            "Detalles completos del producto"
        )

        # ===== MOSTRAR RESUMEN =====
        capturas = screenshots.obtener_capturas()
        print("\n" + "="*60)
        print("üéâ ¬°TEST COMPLETADO EXITOSAMENTE!")
        print("="*60)
        print(f"üìä Total de capturas tomadas: {len(capturas)}")
        print(f"üìÅ Directorio: {screenshots.obtener_directorio()}")
        print("\nüì∏ Capturas realizadas:")
        
        for i, captura in enumerate(capturas, 1):
            size_mb = captura['size_bytes'] / (1024*1024)
            print(f"  {i}. Paso {captura['paso']:03d}: {captura['descripcion']}")
            print(f"     üìÑ Archivo: {captura['filename']}")
            print(f"     üíæ Tama√±o: {size_mb:.2f} MB")
            print()
        
        print("‚ú® Test demo corregido completado exitosamente")
        print("üåê El navegador deber√≠a haber estado visible durante toda la ejecuci√≥n")
        
    except Exception as e:
        print(f"‚ùå ERROR durante la ejecuci√≥n: {str(e)}")
        
        # ‚≠ê CAPTURA DE ERROR
        if 'screenshots' in locals() and 'agent' in locals():
            try:
                await screenshots.capturar_paso(
                    agent.browser_context,
                    999,
                    f"Estado de error: {str(e)[:50]}"
                )
                print("üì∏ Captura de error tomada")
            except:
                pass
        
        import traceback
        traceback.print_exc()
        
    finally:
        # ‚ö†Ô∏è MANTENER NAVEGADOR ABIERTO PARA VERIFICAR
        print("\n‚è∏Ô∏è  PAUSA: El navegador permanecer√° abierto por 10 segundos para verificar...")
        print("üîç Verifica que el navegador est√© visible y las capturas sean correctas")
        await asyncio.sleep(10)
        
        # Cerrar navegador
        if browser:
            try:
                await browser.close()
                print("‚úÖ Navegador cerrado correctamente")
            except Exception as e:
                print(f"‚ö†Ô∏è Error cerrando navegador: {e}")

        print("\nüèÅ Test finalizado")


if __name__ == "__main__":
    print("üîß Ejecutando test_demo_mejorado_fixed.py")
    print("üìñ Este script mantiene la l√≥gica exitosa del original")
    print("üì∑ Pero usa las capturas simplificadas")
    print("üåê El navegador DEBE ser visible durante la ejecuci√≥n\n")
    
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è Test interrumpido por el usuario")
    except Exception as e:
        print(f"\nüí• Error fatal: {e}")
        import traceback
        traceback.print_exc() 